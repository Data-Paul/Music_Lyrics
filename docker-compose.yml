services:
# app container für die python anwendung
  app:
    build: .
    container_name: music_app
    # Port-Mapping: Host-Port 5000 -> Container-Port 5000
    ports:
      - "5000:5000"
    # Volume-Mapping: Lokales src-Verzeichnis -> /app im Container
    volumes:
      - ./src:/app
    # Abhängigkeit: Datenbank muss zuerst starten
    depends_on:
      - db
    # Umgebungsvariablen für die Datenbankverbindung
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:8880/music_db

  # PostgreSQL-Datenbank-Service
  db:
    container_name: music_db
    image: postgres:15
    # Datenbank-Konfiguration über Umgebungsvariablen
    environment:
      - POSTGRES_DB=music_db        # Datenbankname
      - POSTGRES_USER=postgres      # Datenbankbenutzer
      - POSTGRES_PASSWORD=postgres  # Datenbankpasswort
      - LANG=en_US.utf8            # Spracheinstellung
      - POSTGRES_INITDB_ARGS=--encoding=UTF8  # UTF8-Kodierung für die Datenbank
    # Volumes für persistente Daten und Initialisierungsskripte
    volumes:
      - ./src/package/database:/docker-entrypoint-initdb.d  # SQL-Skripte für DB-Initialisierung
      - postgres_data:/var/lib/postgresql/data             # Persistente Daten
    # Port-Mapping für direkten Datenbankzugriff
    ports:
      - "8880:8880"
    # Healthcheck: Prüft alle 5 Sekunden, ob die DB bereit ist
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


# Definition des persistenten Volumes für die Datenbank
volumes:
  postgres_data: 


# wir können noch einen pgadmin container hinzufügen damit wir die db besser verwalten können
# pgadmin:
#   image: dpage/pgadmin4
#   ports:
#     - "5050:80"
#   environment:
#     PGADMIN_DEFAULT_EMAIL: "pgadmin@example.com"
#     PGADMIN_DEFAULT_PASSWORD: "pgadmin"
#   depends_on:
#     - db # damit der pgadmin container auf die db zugreifen kann  
